#define MASK 0xffffffff
#define N 4

extern plocal1 plc int[64] get_block(int)

pvt int ROTLEFT(pvt int a, pub int b) {
    return a << b | a >> (32-b);
}

pvt int ROTRIGHT(pvt int a, pub int b) {
    return a >> b | a << (32-b);
}

pvt int CH(pvt int x, pvt int y, pvt int z) {
    return (x & y) ^ ((x ^ MASK) & z);
}

pvt int MAJ(pvt int x, pvt int y, pvt int z) {
    return (x & y) ^ (x & z) ^ (y & z);
}

pvt int EP0(pvt int x) {
    return ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22);
}

pvt int EP1(pvt int x) {
    return ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25);
}

pvt int SIG0(pvt int x) {
    return ROTRIGHT(x, 7) ^ ROTRIGHT(x, 18) ^ (x >> 3);
}

pvt int SIG1(pvt int x) {
    return ROTRIGHT(x, 17) ^ ROTRIGHT(x, 19) ^ (x >> 10);
}

atomic pvt int[8] sha256_block(pvt int[64] &data) {
    pvt int[64] m = {0};

    int i = 0;
    int j = 0;
    while (i < 16) {
        m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
        i = i + 1;
        j = j + 4;
    }

    while (i < 64) {
        m[i] = (SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16]) & MASK;
        i = i + 1;
    }

    pvt int a = 0x6a09e667;
	pvt int b = 0xbb67ae85;
	pvt int c = 0x3c6ef372;
	pvt int d = 0xa54ff53a;
	pvt int e = 0x510e527f;
	pvt int f = 0x9b05688c;
	pvt int g = 0x1f83d9ab;
	pvt int h = 0x5be0cd19;

    pub int[64] k = {
        0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
        0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
        0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
        0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
        0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
        0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
        0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
        0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
    };

    i = 0;
    while (i < 64) {
        pvt int t1 = (h + EP1(e) + CH(e,f,g) + k[i] + m[i]) & MASK;
		pvt int t2 = (EP0(a) + MAJ(a,b,c)) & MASK;
		h = g;
		g = f;
		f = e;
		e = (d + t1) & MASK;
		d = c;
		c = b;
		b = a;
		a = (t1 + t2) & MASK;
        i = i + 1;
    }

    pvt int[8] state = {
        a, b, c, d, e, f, g, h
    };
    return state;
}

atomic pvt int[64] init_block(int block_id) {
    plc int[64] plc_block = get_block(block_id);
    pvt int[64] block = {0};
    for int i = 0; i < 64; i = i + 1; {
        block[i] = commit(plc_block[i]);
    }
    return block;
}

atomic pvt int[8] sha256_node(pvt int[8] &hashL, pvt int[8] &hashR) {
    pvt int[64] block = {0};
    for int i = 0; i < 8; i = i + 1; {
        block[i] = hashL[i];
        block[i+8] = hashR[i];
    }
    for int i = 16; i < 64; i = i + 1; {
        block[i] = 0;
    }
    pvt int[8] hash = sha256_block(block);
    return hash;
}

atomic pvt int[8] sha256_leaf(int block_id) {
    pvt int[64] block = init_block(block_id);
    pvt int[8] hash = sha256_block(block);
    return hash;
}

// compute merkle hash of block[left, ..., right-1]
pvt int[8] merkle(int left, int right) {
    if (left + 1 >= right) {
        pvt int[8] hash = sha256_leaf(left);
        return hash;
    }
    else {
        int mid = (left + right) / 2;
        pvt int[8] hashL = merkle(left, mid);
        pvt int[8] hashR = merkle(mid, right);
        pvt int[8] hash = sha256_node(hashL, hashR);
        return hash;
    }
}

atomic unit vv(pvt int[8] &hash) {
    pub1 int[8] plain_hash = {0};
    for int i = 0; i < 8; i = i + 1; {
        plain_hash[i] = reveal(hash[i]);
    }
    return;
}

unit main() {
    pvt int[8] hash = merkle(0, N);
    vv(hash);
    return;
}