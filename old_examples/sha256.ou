/* Reference: https://github.com/B-Con/crypto-algorithms/blob/master/sha256.c */

struct SHA256_CTX {
    pvt int[64] data;
    int datalen;
    pvt int[8] state;
}

pvt int ROTLEFT(pvt int a, pub int b) {
    return a << b | a >> (32-b);
}

pvt int ROTRIGHT(pvt int a, pub int b) {
    return a >> b | a << (32-b);
}

pvt int CH(pvt int x, pvt int y, pvt int z) {
    return (x & y) ^ ((x ^ 0xffffffff) & z);
}

pvt int MAJ(pvt int x, pvt int y, pvt int z) {
    return (x & y) ^ (x & z) ^ (y & z);
}

pvt int EP0(pvt int x) {
    return ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22);
}

pvt int EP1(pvt int x) {
    return ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25);
}

pvt int SIG0(pvt int x) {
    return ROTRIGHT(x, 7) ^ ROTRIGHT(x, 18) ^ (x >> 3);
}

pvt int SIG1(pvt int x) {
    return ROTRIGHT(x, 17) ^ ROTRIGHT(x, 19) ^ (x >> 10);
}

pub int[64] k = {
    0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,
    0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,
    0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,
    0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,
    0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,
    0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,
    0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
    0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

atomic unit sha256_transform(struct SHA256_CTX* ctx) {
    pvt int[64] m = {0}; /* size = 64 */

    int i = 0;
    int j = 0;
    while (i < 16) {
        m[i] = (ctx->data[j] << 24) | (ctx->data[j + 1] << 16) | (ctx->data[j + 2] << 8) | (ctx->data[j + 3]);
        i = i + 1;
        j = j + 4;
    }

    while (i < 64) {
        m[i] = (SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16]) & 0xffffffff;
        i = i + 1;
    }

    pvt int a = ctx->state[0];
	pvt int b = ctx->state[1];
	pvt int c = ctx->state[2];
	pvt int d = ctx->state[3];
	pvt int e = ctx->state[4];
	pvt int f = ctx->state[5];
	pvt int g = ctx->state[6];
	pvt int h = ctx->state[7];

    i = 0;
    while (i < 64) {
        pvt int t1 = (h + EP1(e) + CH(e,f,g) + k[i] + m[i]) & 0xffffffff;
		pvt int t2 = (EP0(a) + MAJ(a,b,c)) & 0xffffffff;
		h = g;
		g = f;
		f = e;
		e = (d + t1) & 0xffffffff;
		d = c;
		c = b;
		b = a;
		a = (t1 + t2) & 0xffffffff;
        i = i + 1;
    }

    ctx->state[0] = (ctx->state[0] + a) & 0xffffffff;
	ctx->state[1] = (ctx->state[1] + b) & 0xffffffff;
	ctx->state[2] = (ctx->state[2] + c) & 0xffffffff;
	ctx->state[3] = (ctx->state[3] + d) & 0xffffffff;
	ctx->state[4] = (ctx->state[4] + e) & 0xffffffff;
	ctx->state[5] = (ctx->state[5] + f) & 0xffffffff;
	ctx->state[6] = (ctx->state[6] + g) & 0xffffffff;
	ctx->state[7] = (ctx->state[7] + h) & 0xffffffff;

/*
    i = 0;
    while (i < 8) {
        debug_hex(ctx->state[i]);
        i = i + 1;
    }
    debug_endline();
*/
    return;
}

pvt int[2048] input = {0};

atomic unit copy_to_ctx(struct SHA256_CTX *ctx, int start, int len) {
    int data_i = 0; /* point to ctx->data */
    int input_i = start; /* point to input */
    while (data_i < len) {
        ctx->data[data_i] = input[input_i];
        data_i = data_i + 1;
        input_i = input_i + 1;
    }
    ctx->datalen = len;
    return;
}

/** Fill 0 into ctx->data[start ~ bound], bound is excluded. */
atomic unit pad_ctx(struct SHA256_CTX *ctx, int start, int bound) {
    int i = start;
    while (i < bound) {
        ctx->data[i] = 0;
        i = i + 1;
    }
    return;
}

atomic unit reverse_endian(struct SHA256_CTX *ctx) {
    int i = 0;
    pvt int[32] hash = {0};
    while (i < 4) {
        hash[i]      = (ctx->state[0] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 4]  = (ctx->state[1] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 8]  = (ctx->state[2] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 12] = (ctx->state[3] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 16] = (ctx->state[4] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 20] = (ctx->state[5] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 24] = (ctx->state[6] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 28] = (ctx->state[7] >> (24 - i * 8)) & 0x000000ff;
        i = i + 1;
    }
    /* compare with the solution */
    i = 0;
    while (i < 32) {
        debug_hex(hash[i]);
        i = i + 1;
    }
    debug_endline();
    return;
}

/** Copy data from input to ctx, then do transformation for every 64 words. */
unit sha256_update(struct SHA256_CTX *ctx, int len) {
    int i = 0; /* point to input */
    while (i < len) {
        if (len - i >= 64) {
            copy_to_ctx(ctx, i, 64);
            sha256_transform(ctx);
            i = i + 64;
            ctx->datalen = 0;
        }
        else {
            copy_to_ctx(ctx, i, len-i);
            i = len;
        }
    }
    /*
    while (i < len) {
        ctx->data[ctx->datalen] = input[i];
		ctx->datalen = ctx->datalen + 1;
		if (ctx->datalen == 64) {
			sha256_transform(ctx);
			ctx->datalen = 0;
		}
        i = i + 1;
    }
    */
    return;
}

atomic unit sha256_final(struct SHA256_CTX *ctx, int bitlen) {
    int i = ctx->datalen;

    /* pad */
    if (ctx->datalen < 56) {
        ctx->data[i] = 0x80;
        pad_ctx(ctx, i+1, 56);
    }
    else {
        ctx->data[i] = 0x80;
        pad_ctx(ctx, i+1, 64);
        sha256_transform(ctx);
    }

    /* append message's length in bits */
    ctx->data[63] = bitlen;
	ctx->data[62] = bitlen >> 8;
	ctx->data[61] = bitlen >> 16;
	ctx->data[60] = bitlen >> 24;
	ctx->data[59] = 0; /* note: we only consider 32bit representable bitlen */
	ctx->data[58] = 0;
	ctx->data[57] = 0;
	ctx->data[56] = 0;
    sha256_transform(ctx);

    /* Since this implementation uses little endian byte ordering and SHA uses big endian,
       reverse all the bytes when copying the final state to the output hash. */
    reverse_endian(ctx);
    return;
}

unit main() {
    /* init */
    struct SHA256_CTX ctx = {
        .data = {0},
        .datalen = 0,
        .state = {
            0x6a09e667,
            0xbb67ae85,
            0x3c6ef372,
            0xa54ff53a,
            0x510e527f,
            0x9b05688c,
            0x1f83d9ab,
            0x5be0cd19
        }
    };

    /* update */
    sha256_update(&ctx, 1110);

    /* final */
    sha256_final(&ctx, 1110*8);
    return;
}