#define size 532
#define size2 6
extern plocal1 plc float[size2] car_coords()

atomic pvt1 float[size2] init_coords() {
    plc float[size2] coords = car_coords();
    pvt float[size2] pvt_coords = {0};
    for int i = 0; i < size2; i = i + 1; {
        pvt_coords[i] = commit(coords[i]);
    }
    return pvt_coords;
}

// Calculate factorial of number
atomic pvt float factorial(int n) {
    if (n == 0 || n == 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

// Calculate power of number
atomic pvt float power(pvt float num, int n) {
    pvt float res = 1;
    if (n == 0) {
        return res;
    }
    else {
        for int i = 0; i < n; i = i + 1; {
            res = res * num;
        }
    }
    return res;
}

// Calculated using Taylor Series using 8 terms
// Requires factorial and power
atomic pvt float sine_value(pvt1 float coord) {
    pvt float sine = 0.0;
    pub int terms = 10;
    for int i = 0; i < terms; i = i + 1; {
        pub int coef = 2 * i + 1;
        pvt float term = power(coord, coef) / factorial(coef);
        if (i % 2 == 0) {
            sine = sine + term;
        }
        else {
            sine = sine - term;
        }
    }
    return sine;
}

atomic pvt float cosine_value(pvt1 float coord) {
    pvt float cosine = 0.0;
    pub int terms = 10;
    for int i = 0; i < terms; i = i + 1; {
        pub int coef = 2 * i;
        pvt float term = power(coord, coef) / factorial(coef);
        if (i % 2 == 0) {
            cosine = cosine + term;
        }
        else {
            cosine = cosine - term;
        }
    }
    return cosine;
}

atomic pvt float square_root(pvt1 float val) {
    pvt float guess = val / 2;

    for pub int i = 0; i < 20; i = i + 1; {
        guess = (guess + (val / guess)) / 2;
    }

    return guess;
}

atomic pvt float haversine(pvt1 float lon1, pvt1 float lat1, pvt1 float lon2, pvt1 float lat2) {
    pub float pi = 3.1415926535;

    pvt float lat1_rad = lat1 * pi / 180;
    pvt float lat2_rad = lat2 * pi / 180;
    pvt float lon1_rad = lon1 * pi / 180;
    pvt float lon2_rad = lon2 * pi / 180;

    pvt float delta_lat = lat2_rad - lat1_rad;
    pvt float delta_lon = lon2_rad - lon1_rad;
    pvt float sine_delta_lat = sine_value(delta_lat / 2);
    pvt float sine_delta_lon = sine_value(delta_lon / 2);

    pvt float cos_lat1 = cosine_value(lat1_rad);
    pvt float cos_lat2 = cosine_value(lat2_rad);

    pvt float a = power(sine_delta_lat, 2) + cos_lat1 * cos_lat2 * power(sine_delta_lon, 2);

    pub float radius_earth = 6371;

    pvt float distance = 2 * radius_earth * sine_value(square_root(a));

    return distance;
}

pvt float under_pct(pvt1 float[size2] coords) {
    pub1 float[size] dchighways = {-77.028064, 38.889484, -77.028055, 38.890466, -77.028054, 38.890474, -77.028053, 38.89076, -77.028054, 38.891003, -77.028055, 38.891247, -77.028059, 38.891475, -77.02806, 38.891706, -77.028056, 38.891913, -77.02814, 38.892093, -77.04492, 38.895437, -77.045077, 38.89547, -77.045083, 38.895471, -77.045563, 38.895547, -77.045717, 38.89558, -77.045877, 38.895606, -77.046038, 38.895625, -77.046088, 38.895628, -77.046148, 38.895631, -77.046208, 38.895635, -77.046267, 38.895639, -77.046323, 38.895644, -77.046522, 38.895647, -77.046681, 38.895653, -77.046753, 38.895656, -77.046862, 38.895661, -77.046932, 38.89567, -77.047429, 38.895713, -77.047547, 38.895723, -77.047951, 38.895755, -77.047991, 38.895758, -77.04841, 38.895796, -77.048802, 38.895814, -77.048976, 38.895824, -77.049193, 38.895833, -77.049557, 38.895827, -77.049738, 38.895825, -77.049932, 38.895823, -77.050122, 38.895822, -77.050307, 38.89582, -77.050501, 38.895818, -77.051496, 38.895842, -77.051765, 38.895848, -77.051798, 38.895849, -77.05184, 38.895847, -77.051869, 38.895848, -77.052032, 38.895843, -77.052136, 38.895837, -77.052249, 38.89583, -77.052318, 38.895822, -77.052394, 38.895812, -77.052476, 38.895798, -77.052583, 38.895777, -77.05269, 38.895748, -77.052809, 38.895717, -77.052919, 38.895682, -77.053014, 38.895649, -77.053124, 38.895608, -77.053227, 38.895578, -77.05332, 38.895544, -77.053406, 38.895521, -77.053429, 38.895517, -77.053451, 38.895515, -77.053517, 38.895511, -77.053584, 38.89551, -77.053662, 38.895519, -77.053704, 38.895525, -77.053764, 38.895543, -77.05383, 38.895569, -77.053849, 38.89558, -77.053938, 38.895634, -77.053953, 38.895645, -77.05396, 38.89565, -77.054009, 38.895697, -77.054069, 38.895774, -77.054101, 38.895834, -77.054114, 38.895871, -77.05412, 38.895892, -77.054127, 38.895948, -77.054125, 38.895994, -77.054123, 38.89601, -77.054119, 38.896047, -77.054102, 38.896091, -77.054096, 38.896106, -77.054063, 38.896201, -77.054045, 38.896271, -77.107127, 38.924806, -77.10716, 38.924824, -77.107222, 38.924859, -77.107236, 38.924867, -77.107282, 38.924894, -77.107381, 38.924955, -77.107401, 38.924967, -77.107459, 38.925005, -77.107517, 38.925043, -77.107573, 38.925082, -77.107629, 38.925122, -77.107684, 38.925162, -77.107947, 38.925362, -77.107974, 38.925384, -77.108001, 38.925406, -77.108028, 38.925427, -77.108055, 38.925449, -77.108081, 38.925471, -77.108108, 38.925494, -77.108134, 38.925516, -77.10816, 38.925538, -77.108186, 38.925561, -77.108212, 38.925583, -77.108356, 38.92571, -77.108547, 38.92588, -77.108776, 38.926089, -77.109011, 38.926312, -77.109222, 38.926515, -77.109453, 38.92675, -77.109712, 38.927034, -77.109889, 38.927241, -77.110054, 38.927442, -77.110186, 38.927632, -77.110281, 38.927787, -77.110422, 38.928023, -77.110542, 38.928227, -77.110773, 38.928629, -77.111053, 38.929115, -77.11134, 38.929635, -77.111352, 38.929655, -77.111557, 38.93002, -77.111573, 38.930049, -77.111584, 38.930066, -77.111595, 38.930083, -77.111607, 38.9301, -77.111619, 38.930117, -77.111632, 38.930133, -77.111645, 38.930149, -77.111658, 38.930165, -77.111672, 38.930181, -77.111687, 38.930196, -77.111702, 38.930211, -77.111718, 38.930226, -77.111736, 38.930239, -77.111743, 38.930243, -77.111743, 38.930243, -77.111855, 38.93045, -77.111858, 38.930454, -77.111988, 38.930641, -77.11206, 38.930737, -77.112129, 38.930824, -77.112159, 38.930861, -77.112189, 38.930899, -77.112219, 38.930936, -77.112248, 38.930974, -77.112277, 38.931012, -77.112305, 38.93105, -77.112333, 38.931088, -77.112361, 38.931126, -77.112389, 38.931165, -77.112416, 38.931203, -77.112437, 38.931234, -77.112457, 38.931265, -77.112477, 38.931296, -77.112496, 38.931327, -77.112516, 38.931358, -77.112535, 38.931389, -77.112553, 38.93142, -77.112571, 38.931452, -77.112589, 38.931483, -77.112607, 38.931515, -77.112667, 38.931623, -77.112686, 38.931662, -77.112705, 38.931702, -77.112724, 38.931742, -77.112743, 38.931782, -77.112762, 38.931822, -77.112781, 38.931862, -77.1128, 38.931902, -77.112818, 38.931942, -77.112837, 38.931982, -77.112856, 38.932022, -77.112899, 38.932118, -77.112944, 38.932213, -77.112991, 38.932308, -77.11303, 38.932382, -77.11304, 38.932402, -77.113091, 38.932496, -77.113145, 38.932588, -77.1132, 38.932681, -77.113257, 38.932772, -77.113316, 38.932863, -77.113376, 38.932953, -77.113411, 38.933001, -77.113446, 38.933049, -77.113482, 38.933097, -77.113518, 38.933145, -77.113554, 38.933192, -77.113591, 38.93324, -77.113628, 38.933287, -77.113666, 38.933334, -77.113704, 38.933381, -77.113742, 38.933427, -77.113788, 38.933482, -77.113834, 38.933537, -77.11388, 38.933592, -77.113926, 38.933647, -77.113972, 38.933702, -77.114019, 38.933757, -77.114065, 38.933811, -77.114112, 38.933866, -77.114158, 38.933921, -77.114205, 38.933975, -77.114265, 38.934046, -77.114326, 38.934117, -77.114387, 38.934188, -77.114447, 38.934259, -77.114508, 38.93433, -77.114569, 38.934401, -77.11463, 38.934472, -77.114691, 38.934543, -77.114752, 38.934613, -77.114813, 38.934684, -77.114861, 38.934738, -77.114907, 38.934792, -77.114954, 38.934847, -77.115, 38.934901, -77.115046, 38.934956, -77.115092, 38.935011, -77.115137, 38.935066, -77.115182, 38.935121, -77.115227, 38.935176, -77.115272, 38.935231, -77.115318, 38.935289, -77.115364, 38.935346, -77.115409, 38.935404, -77.115455, 38.935462, -77.1155, 38.93552, -77.115545, 38.935578, -77.11559, 38.935636, -77.115634, 38.935694, -77.115679, 38.935752, -77.115723, 38.935811, -77.115941, 38.936088, -77.115984, 38.936143, -77.116028, 38.936199, -77.116072, 38.936254, -77.116118, 38.936308, -77.116165, 38.936362, -77.116213, 38.936415, -77.116261, 38.936468, -77.11631, 38.936521, -77.116361, 38.936573, -77.116412, 38.936624, -77.116449, 38.936659, -77.116486, 38.936694, -77.116524, 38.936728, -77.116563, 38.936762, -77.116602, 38.936796, -77.116641, 38.936829, -77.023965, 38.890519, -77.023964, 38.890869, -77.023964, 38.891127, -77.023965, 38.891381, -77.023966, 38.891573, -77.023963, 38.89174, -77.023964, 38.891894, -77.023964, 38.891899, -77.023964, 38.892009, -77.023964, 38.892087};

    // Loop through the list of coords and place them against the coords of the highway
    // If they are within 0.0015 km of the coord, return true
    // pvt bool b = true;
    pvt float total = 0.0; 
    for pub int i = 0; i < size2 - 1; i = i + 2; {
        for pub int j = 0; j < size - 2; j = j + 2; {
            total = total + haversine(coords[i], coords[i + 1], dchighways[j], dchighways[j + 1]);
            if total < 0.015 {
                return total;
            }
        }
    }
    return total;
}

unit main() {
    pvt1 float[size2] coords = init_coords();
    pub1 float col = reveal(under_pct(coords));
    pub1 bool c = (col * size2) < (size * size2 / 2 * 0.015);
    assert(c == false);
    return;
}